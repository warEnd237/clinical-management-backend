# Default values for clinical-management
# This is a YAML-formatted file.

# Global settings
global:
  storageClass: ""

# Backend configuration
backend:
  enabled: true
  replicaCount: 2
  
  image:
    repository: clinical-backend
    pullPolicy: IfNotPresent
    tag: "1.0.0"
  
  service:
    type: ClusterIP
    port: 8081
    targetPort: 8081
  
  resources:
    limits:
      cpu: 1000m
      memory: 1024Mi
    requests:
      cpu: 500m
      memory: 512Mi
  
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
  
  env:
    jwtSecret: "changeme-in-production"
    jwtAccessTokenExpiration: "3600000"
    jwtRefreshTokenExpiration: "2592000000"
    corsOrigins: "https://clinical.example.com"
  
  # Email configuration
  email:
    host: smtp.gmail.com
    port: "587"
    username: ""
    password: ""
    from: noreply@clinical.com
  
  # Health checks
  livenessProbe:
    enabled: true
    httpGet:
      path: /actuator/health/liveness
      port: 8081
    initialDelaySeconds: 60
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  
  readinessProbe:
    enabled: true
    httpGet:
      path: /actuator/health/readiness
      port: 8081
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3

# Frontend configuration
frontend:
  enabled: true
  replicaCount: 2
  
  image:
    repository: clinical-frontend
    pullPolicy: IfNotPresent
    tag: "1.0.0"
  
  service:
    type: ClusterIP
    port: 80
    targetPort: 80
  
  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi
  
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 5
    targetCPUUtilizationPercentage: 70

# PostgreSQL configuration
postgresql:
  enabled: true
  auth:
    username: postgres
    password: postgres
    database: clinical_db
  
  primary:
    persistence:
      enabled: true
      size: 10Gi
    
    resources:
      limits:
        cpu: 1000m
        memory: 1024Mi
      requests:
        cpu: 500m
        memory: 512Mi
  
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true

# Ingress configuration
ingress:
  enabled: true
  className: nginx
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
  
  hosts:
    - host: clinical.example.com
      paths:
        - path: /api
          pathType: Prefix
          service: backend
        - path: /
          pathType: Prefix
          service: frontend
  
  tls:
    - secretName: clinical-tls
      hosts:
        - clinical.example.com

# Monitoring configuration
monitoring:
  enabled: true
  
  prometheus:
    enabled: true
    serviceMonitor:
      enabled: true
      interval: 30s
      path: /actuator/prometheus
  
  grafana:
    enabled: true
    dashboards:
      enabled: true

# ConfigMap and Secrets
configMap:
  enabled: true

secrets:
  enabled: true
  # Values should be base64 encoded in production

# Service Account
serviceAccount:
  create: true
  annotations: {}
  name: ""

# Pod Security
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  fsGroup: 1000

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: false

# Network Policy
networkPolicy:
  enabled: true
  policyTypes:
    - Ingress
    - Egress

# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1
